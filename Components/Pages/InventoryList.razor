@page "/inventory"
@using DVTech_ODSS.Models
@using DVTech_ODSS.Services
@inject InventoryService InventoryService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Inventory Management</PageTitle>

<div class="container-fluid">
    <div class="row mb-3 align-items-center">
        <div class="col">
            <h3 class="mb-0">üì¶ Inventory Management</h3>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="ShowAddModal">
                ‚ûï Add New Item
            </button>
            <button type="button" class="btn btn-secondary" @onclick="ShowArchiveList">
                üìÅ Archives (@archivedItems.Count)
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row g-3 mb-3">
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body p-3">
                    <p class="text-muted small mb-1">Total Inventory Value</p>
                    <h4 class="mb-0 text-success">‚Ç±@CalculateTotalValue().ToString("N2")</h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body p-3">
                    <p class="text-muted small mb-1">Total Items</p>
                    <h4 class="mb-0">@displayedItems.Count</h4>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body p-3">
                    <p class="text-muted small mb-1">Low Stock Items</p>
                    <h4 class="mb-0 text-danger">@lowStockItems.Count</h4>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card shadow-sm mb-3">
        <div class="card-body p-2">
            <div class="row g-2 align-items-center">
                <div class="col-md-3">
                    <input type="text" class="form-control form-control-sm" placeholder="üîç Search by name..." @bind="searchText" @bind:event="oninput" @onkeyup="ApplyFilters" />
                </div>
                <div class="col-md-3">
                    <select class="form-select form-select-sm" @onchange="OnCategoryChanged">
                        <option value="">All Categories</option>
                        @foreach (var category in GetAllCategories())
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select form-select-sm" @onchange="OnBrandChanged">
                        <option value="">All Brands</option>
                        @foreach (var brand in GetAllBrands())
                        {
                            <option value="@brand">@brand</option>
                        }
                    </select>
                </div>
                <div class="col-md-3 text-end">
                    @if (!string.IsNullOrEmpty(selectedCategory) || !string.IsNullOrEmpty(selectedBrand) || !string.IsNullOrEmpty(selectedStockStatus))
                    {
                        <span class="badge bg-info">@displayedItems.Count items shown</span>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (lowStockItems.Any() && string.IsNullOrEmpty(selectedCategory))
    {
        <div class="alert alert-warning py-2" role="alert">
            <strong>‚ö†Ô∏è Low Stock Alert!</strong> You have @lowStockItems.Count item(s) running low on stock.
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (showArchives)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-secondary text-white py-2">
                <div class="d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">üìÅ Archived Items</h6>
                    <button type="button" class="btn btn-sm btn-light" @onclick="CloseArchiveList">Back to Inventory</button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-sm mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="py-2">Item Name</th>
                                <th class="py-2">Brand</th>
                                <th class="py-2">Category</th>
                                <th class="py-2">Quantity</th>
                                <th class="py-2">Archived Date</th>
                                <th class="py-2 text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (archivedItems.Any())
                            {
                                @foreach (var item in archivedItems)
                                {
                                    <tr>
                                        <td class="py-2 small">@item.ItemName</td>
                                        <td class="py-2 small">@item.Brand</td>
                                        <td class="py-2 small">@item.Category</td>
                                        <td class="py-2 small">@item.Quantity @item.Unit</td>
                                        <td class="py-2 small">@item.ArchivedDate?.ToString("MMM dd, yyyy") ?? "Unknown"</td>
                                        <td class="py-2 text-center">
                                            <button type="button" class="btn btn-sm btn-outline-success py-0 px-2" @onclick="@(() => RestoreItem(item.ItemId))">‚Ü©Ô∏è Restore</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center py-4 text-muted">
                                        No archived items.
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-sm mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="py-2">Item Name</th>
                                <th class="py-2">Brand</th>
                                <th class="py-2">Category</th>
                                <th class="py-2">Quantity</th>
                                <th class="py-2">Unit</th>
                                <th class="py-2">Unit Price</th>
                                <th class="py-2">Total Value</th>
                                <th class="py-2 text-center">
                                    <select class="form-select form-select-sm d-inline-block w-auto" @onchange="OnStockStatusChanged" style="font-size: 0.875rem;">
                                        <option value="">Stock Status ‚ñº</option>
                                        <option value="Low Stock">Low Stock</option>
                                        <option value="Good Stock">Good Stock</option>
                                        <option value="High Stock">High Stock</option>
                                    </select>
                                </th>
                                <th class="py-2 text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (displayedItems.Any())
                            {
                                @foreach (var item in displayedItems)
                                {
                                    <tr style="cursor: pointer;" @onclick="@(() => ViewItemDetails(item))">
                                        <td class="py-2 small">@item.ItemName</td>
                                        <td class="py-2 small">@item.Brand</td>
                                        <td class="py-2 small">@item.Category</td>
                                        <td class="py-2 small">
                                            <span class="@(item.Quantity <= item.MinimumStockLevel ? "text-danger fw-bold" : "")">
                                                @item.Quantity
                                            </span>
                                        </td>
                                        <td class="py-2 small">@item.Unit</td>
                                        <td class="py-2 small">‚Ç±@item.UnitPrice.ToString("N2")</td>
                                        <td class="py-2 small"><strong>‚Ç±@((item.Quantity * item.UnitPrice).ToString("N2"))</strong></td>
                                        <td class="py-2 text-center">
                                            <span class="badge @GetStockStatusBadgeClass(item) small">
                                                @GetStockStatus(item)
                                            </span>
                                        </td>
                                        <td class="py-2 text-center" @onclick:stopPropagation="true">
                                            <button type="button" class="btn btn-sm btn-outline-primary py-0 px-2" @onclick="@(() => ShowEditModal(item))">Edit</button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary py-0 px-2" @onclick="@(() => ShowArchiveConfirmation(item))">Archive</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="9" class="text-center py-4 text-muted">
                                        No items found.
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Add/Edit Item Modal -->
@if (showFormModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white py-2">
                    <h6 class="modal-title mb-0">@(editingItem != null ? "Edit Item" : "Add New Item")</h6>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseFormModal"></button>
                </div>
                <div class="modal-body p-3">
                    <div class="row g-2 mb-2">
                        <div class="col-md-6">
                            <label class="form-label small fw-bold mb-1">Item Name *</label>
                            <input type="text" class="form-control form-control-sm @(itemNameError ? "is-invalid" : "")" @bind="itemName" @bind:event="oninput" @onblur="ValidateItemName" placeholder="Enter item name" />
                            @if (itemNameError)
                            {
                                <div class="invalid-feedback d-block small">Please enter a valid item name (minimum 3 characters, letters and numbers only)</div>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label small fw-bold mb-1">Brand *</label>
                            <input list="brandList" type="text" class="form-control form-control-sm @(brandError ? "is-invalid" : "")" @bind="brand" @bind:event="oninput" @onblur="ValidateBrand" placeholder="Select or enter brand name" />
                            <datalist id="brandList">
                                @foreach (var existingBrand in GetAllBrands())
                                {
                                    <option value="@existingBrand">@existingBrand</option>
                                }
                            </datalist>
                            @if (brandError)
                            {
                                <div class="invalid-feedback d-block small">Please enter a valid brand name (minimum 2 characters, letters only)</div>
                            }
                        </div>
                    </div>

                    <div class="row g-2 mb-2">
                        <div class="col-md-6">
                            <label class="form-label small fw-bold mb-1">Category *</label>
                            <input list="categoryList" type="text" class="form-control form-control-sm @(categoryError ? "is-invalid" : "")" @bind="category" @bind:event="oninput" @onblur="ValidateCategory" placeholder="Select or enter category" />
                            <datalist id="categoryList">
                                @foreach (var existingCategory in GetAllCategories())
                                {
                                    <option value="@existingCategory">@existingCategory</option>
                                }
                            </datalist>
                            <small class="text-muted">New categories will be automatically registered</small>
                            @if (categoryError)
                            {
                                <div class="invalid-feedback d-block small">Please enter a valid category (minimum 2 characters)</div>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label small fw-bold mb-1">Unit *</label>
                            <input list="unitList" type="text" class="form-control form-control-sm @(unitError ? "is-invalid" : "")" @bind="unit" @bind:event="oninput" @onblur="ValidateUnit" placeholder="Select or enter unit" />
                            <datalist id="unitList">
                                @foreach (var existingUnit in GetAllUnits())
                                {
                                    <option value="@existingUnit">@existingUnit</option>
                                }
                            </datalist>
                            @if (unitError)
                            {
                                <div class="invalid-feedback d-block small">Please enter a valid unit (minimum 1 character, letters only)</div>
                            }
                        </div>
                    </div>

                    <div class="mb-2">
                        <label class="form-label small fw-bold mb-1">Description</label>
                        <textarea class="form-control form-control-sm @(descriptionError ? "is-invalid" : "")"
                                  rows="3"
                                  maxlength="200"
                                  @bind="description"
                                  @bind:event="oninput"
                                  @onblur="ValidateDescription"
                                  placeholder="Item description (optional)"></textarea>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                @if (descriptionError)
                                {
                                    <span class="text-danger small">Description must be at least 10 characters if provided</span>
                                }
                            </div>
                            <small class="text-muted">@description.Length / 200</small>
                        </div>
                    </div>

                    <div class="row g-2 mb-3">
                        <div class="col-md-3">
                            <label class="form-label small fw-bold mb-1">Current Quantity *</label>
                            <input type="number" class="form-control form-control-sm bg-light" @bind="quantity" min="1" readonly disabled />
                            <small class="text-muted">Updated via sales/purchases only</small>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small fw-bold mb-1">Min. Stock Level *</label>
                            <input type="number" class="form-control form-control-sm @(minStockError ? "is-invalid" : "")" @bind="minimumStockLevel" @bind:event="oninput" @onblur="ValidateMinStock" min="1" />
                            @if (minStockError)
                            {
                                <div class="invalid-feedback d-block small">Min. stock must be at least 1</div>
                            }
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small fw-bold mb-1">High Stock Level *</label>
                            <input type="number" class="form-control form-control-sm @(highStockError ? "is-invalid" : "")" @bind="highStockLevel" @bind:event="oninput" @onblur="ValidateHighStock" min="1" />
                            @if (highStockError)
                            {
                                <div class="invalid-feedback d-block small">High stock must be greater than min. stock</div>
                            }
                        </div>
                        <div class="col-md-3">
                            <label class="form-label small fw-bold mb-1">Unit Price *</label>
                            <input type="number" class="form-control form-control-sm @(priceError ? "is-invalid" : "")" @bind="unitPrice" @bind:event="oninput" @onblur="ValidatePrice" step="0.01" min="0" />
                            @if (priceError)
                            {
                                <div class="invalid-feedback d-block small">Price must be 0 or greater</div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer py-2">
                    <button type="button" class="btn btn-success btn-sm" @onclick="SaveItem" disabled="@(!IsFormValid())">
                        @(editingItem != null ? "Update" : "Save")
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="CloseFormModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Confirmation Modal -->
@if (showEditConfirmation && editingItem != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-warning py-2">
                    <h6 class="modal-title mb-0">‚ö†Ô∏è Confirm Edit</h6>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to save changes to <strong>@editingItem.ItemName</strong>?</p>
                    <p class="text-muted small mb-0">This will update the item information in the inventory.</p>
                </div>
                <div class="modal-footer py-2">
                    <button type="button" class="btn btn-sm btn-success" @onclick="ConfirmEdit">Yes, Save Changes</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CancelEdit">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- View Details Modal -->
@if (showDetailsModal && selectedItem != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-gradient text-white py-3" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <div class="d-flex align-items-center">
                        <span style="font-size: 2rem; margin-right: 15px;">üì¶</span>
                        <div>
                            <h5 class="modal-title mb-0">@selectedItem.ItemName</h5>
                            <small class="opacity-75">@selectedItem.Brand ‚Ä¢ @selectedItem.Category</small>
                        </div>
                    </div>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDetailsModal"></button>
                </div>
                <div class="modal-body p-4">
                    <!-- Stock Status Badge -->
                    <div class="text-center mb-4">
                        <span class="badge @GetStockStatusBadgeClass(selectedItem) px-4 py-2" style="font-size: 1.1rem;">
                            @GetStockStatus(selectedItem)
                        </span>
                    </div>

                    <!-- Description Card -->
                    @if (!string.IsNullOrEmpty(selectedItem.Description))
                    {
                        <div class="card bg-light border-0 mb-4">
                            <div class="card-body p-3">
                                <h6 class="text-muted small mb-2">üìÑ DESCRIPTION</h6>
                                <p class="mb-0">@selectedItem.Description</p>
                            </div>
                        </div>
                    }

                    <!-- Stock Information -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <div class="card border-0 shadow-sm h-100">
                                <div class="card-body text-center p-3">
                                    <div class="text-muted small mb-1">üìä CURRENT STOCK</div>
                                    <h2 class="mb-0 @(selectedItem.Quantity <= selectedItem.MinimumStockLevel ? "text-danger" : "text-success")">
                                        @selectedItem.Quantity
                                    </h2>
                                    <small class="text-muted">@selectedItem.Unit</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-0 shadow-sm h-100">
                                <div class="card-body text-center p-3">
                                    <div class="text-muted small mb-1">üí∞ TOTAL VALUE</div>
                                    <h2 class="mb-0 text-primary">
                                        ‚Ç±@((selectedItem.Quantity * selectedItem.UnitPrice).ToString("N2"))
                                    </h2>
                                    <small class="text-muted">@selectedItem.Quantity √ó ‚Ç±@selectedItem.UnitPrice.ToString("N2")</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Stock Levels -->
                    <div class="card border-0 bg-light mb-4">
                        <div class="card-body p-3">
                            <h6 class="text-muted small mb-3">üìà STOCK LEVELS</h6>
                            <div class="row g-3">
                                <div class="col-6">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="small">Minimum Stock</span>
                                        <span class="badge bg-warning text-dark">@selectedItem.MinimumStockLevel @selectedItem.Unit</span>
                                    </div>
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar bg-warning" style="width: 33%"></div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="small">High Stock</span>
                                        <span class="badge bg-success">@selectedItem.HighStockLevel @selectedItem.Unit</span>
                                    </div>
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar bg-success" style="width: 100%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Pricing Information -->
                    <div class="card border-0 bg-light mb-4">
                        <div class="card-body p-3">
                            <h6 class="text-muted small mb-3">üíµ PRICING</h6>
                            <div class="row">
                                <div class="col-6">
                                    <div class="d-flex justify-content-between">
                                        <span>Unit Price:</span>
                                        <strong class="text-primary">‚Ç±@selectedItem.UnitPrice.ToString("N2")</strong>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="d-flex justify-content-between">
                                        <span>Per Unit:</span>
                                        <strong>@selectedItem.Unit</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Timeline Information -->
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="card border-0 border-start border-primary border-3 bg-light">
                                <div class="card-body p-3">
                                    <div class="small text-muted mb-1">üìÖ Date Added</div>
                                    <div class="fw-bold">@selectedItem.DateAdded.ToString("MMMM dd, yyyy")</div>
                                    <small class="text-muted">@((DateTime.Now - selectedItem.DateAdded).Days) days ago</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card border-0 border-start border-success border-3 bg-light">
                                <div class="card-body p-3">
                                    <div class="small text-muted mb-1">üîÑ Last Restocked</div>
                                    <div class="fw-bold">
                                        @if (selectedItem.LastRestocked.HasValue)
                                        {
                                            @selectedItem.LastRestocked.Value.ToString("MMMM dd, yyyy")
                                            <div><small class="text-muted">@((DateTime.Now - selectedItem.LastRestocked.Value).Days) days ago</small></div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Never restocked</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light py-3">
                    <button type="button" class="btn btn-primary" @onclick="@(() => ShowEditModalFromDetails(selectedItem))">
                        <span>‚úèÔ∏è</span> Edit Item
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Archive Confirmation Modal -->
@if (showArchiveConfirmationModal && itemToArchive != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-secondary text-white py-2">
                    <h6 class="modal-title mb-0">üìÅ Confirm Archive</h6>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelArchive"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to archive <strong>@itemToArchive.ItemName</strong>?</p>
                    <p class="text-muted small mb-0">This item will be moved to Archives and can be restored later.</p>
                </div>
                <div class="modal-footer py-2">
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="ConfirmArchive">Yes, Archive</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="CancelArchive">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<InventoryItem> items = new();
    private List<InventoryItem> displayedItems = new();
    private List<InventoryItem> lowStockItems = new();
    private List<InventoryItem> archivedItems = new();
    private InventoryItem? editingItem = null;
    private InventoryItem? selectedItem = null;
    private InventoryItem? itemToArchive = null;

    private bool showFormModal = false;
    private bool showDetailsModal = false;
    private bool showArchives = false;
    private bool showArchiveConfirmationModal = false;
    private bool showEditConfirmation = false;
    private bool isLoading = true;

    private string searchText = "";
    private string selectedCategory = "";
    private string selectedBrand = "";
    private string selectedStockStatus = "";

    // Form fields
    private string itemName = "";
    private string brand = "";
    private string category = "";
    private string description = "";
    private int quantity = 1;
    private int minimumStockLevel = 10;
    private int highStockLevel = 100;
    private string unit = "pcs";
    private decimal unitPrice = 0;

    // Validation flags
    private bool itemNameError = false;
    private bool brandError = false;
    private bool categoryError = false;
    private bool unitError = false;
    private bool descriptionError = false;
    private bool quantityError = false;
    private bool minStockError = false;
    private bool highStockError = false;
    private bool priceError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        isLoading = true;
        items = await InventoryService.GetAllItemsAsync();
        archivedItems = await InventoryService.GetArchivedItemsAsync();
        displayedItems = items.ToList();
        lowStockItems = items.Where(i => i.Quantity <= i.MinimumStockLevel).ToList();
        isLoading = false;
        StateHasChanged();
    }

    private List<string> GetAllCategories()
    {
        return items.Select(i => i.Category).Distinct().OrderBy(c => c).ToList();
    }

    private List<string> GetAllBrands()
    {
        return items.Where(i => !string.IsNullOrEmpty(i.Brand)).Select(i => i.Brand!).Distinct().OrderBy(b => b).ToList();
    }

    private List<string> GetAllUnits()
    {
        var defaultUnits = new List<string> { "pcs", "units", "sets", "meters", "kg", "liters", "rolls", "cans", "bottles", "cylinders" };
        var existingUnits = items.Select(i => i.Unit).Distinct().ToList();
        return defaultUnits.Union(existingUnits).Distinct().OrderBy(u => u).ToList();
    }

    private decimal CalculateTotalValue()
    {
        return displayedItems.Sum(i => i.Quantity * i.UnitPrice);
    }

    private decimal CalculateCategoryValue(string cat)
    {
        return displayedItems.Where(i => i.Category == cat).Sum(i => i.Quantity * i.UnitPrice);
    }

    private void ApplyFilters()
    {
        var query = items.AsEnumerable();

        if (!string.IsNullOrEmpty(searchText))
        {
            query = query.Where(i => i.ItemName.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            query = query.Where(i => i.Category == selectedCategory);
        }

        if (!string.IsNullOrEmpty(selectedBrand))
        {
            query = query.Where(i => i.Brand == selectedBrand);
        }

        if (!string.IsNullOrEmpty(selectedStockStatus))
        {
            query = query.Where(i => GetStockStatus(i) == selectedStockStatus);
        }

        displayedItems = query.ToList();
        StateHasChanged();
    }

    // Validation methods
    private void ValidateItemName()
    {
        itemNameError = string.IsNullOrWhiteSpace(itemName) || itemName.Length < 3 || !System.Text.RegularExpressions.Regex.IsMatch(itemName, @"^[a-zA-Z0-9\s\-\.]+$");
    }

    private void ValidateBrand()
    {
        brandError = string.IsNullOrWhiteSpace(brand) || brand.Length < 2 || !System.Text.RegularExpressions.Regex.IsMatch(brand, @"^[a-zA-Z0-9\s\-\.&]+$");
    }

    private void ValidateCategory()
    {
        categoryError = string.IsNullOrWhiteSpace(category) || category.Length < 2;
    }

    private void ValidateUnit()
    {
        unitError = string.IsNullOrWhiteSpace(unit) || unit.Length < 1 || !System.Text.RegularExpressions.Regex.IsMatch(unit, @"^[a-zA-Z]+$");
    }

    private void ValidateDescription()
    {
        descriptionError = !string.IsNullOrWhiteSpace(description) && description.Length < 10;
    }

    private void ValidateQuantity()
    {
        quantityError = quantity < 1;
    }

    private void ValidateMinStock()
    {
        minStockError = minimumStockLevel < 1;
    }

    private void ValidateHighStock()
    {
        highStockError = highStockLevel <= minimumStockLevel;
    }

    private void ValidatePrice()
    {
        priceError = unitPrice < 0;
    }

    private bool IsFormValid()
    {
        ValidateItemName();
        ValidateBrand();
        ValidateCategory();
        ValidateUnit();
        ValidateDescription();
        ValidateQuantity();
        ValidateMinStock();
        ValidateHighStock();
        ValidatePrice();

        return !itemNameError && !brandError && !categoryError && !unitError &&
               !descriptionError && !quantityError && !minStockError &&
               !highStockError && !priceError;
    }

    private void ShowAddModal()
    {
        editingItem = null;
        itemName = "";
        brand = "";
        category = "";
        description = "";
        quantity = 0; // Set to 0 for new items (will be added via purchase orders)
        minimumStockLevel = 10;
        highStockLevel = 100;
        unit = "pcs";
        unitPrice = 0;

        // Reset validation errors
        itemNameError = false;
        brandError = false;
        categoryError = false;
        unitError = false;
        descriptionError = false;
        quantityError = false;
        minStockError = false;
        highStockError = false;
        priceError = false;

        showFormModal = true;
        StateHasChanged();
    }

    private void ShowEditModal(InventoryItem item)
    {
        editingItem = item;
        itemName = item.ItemName;
        brand = item.Brand ?? "";
        category = item.Category;
        description = item.Description ?? "";
        quantity = item.Quantity; // Show current quantity but make it read-only
        minimumStockLevel = item.MinimumStockLevel;
        highStockLevel = item.HighStockLevel;
        unit = item.Unit;
        unitPrice = item.UnitPrice;

        // Reset validation errors
        itemNameError = false;
        brandError = false;
        categoryError = false;
        unitError = false;
        descriptionError = false;
        quantityError = false;
        minStockError = false;
        highStockError = false;
        priceError = false;

        showFormModal = true;
        StateHasChanged();
    }

    private void ShowEditModalFromDetails(InventoryItem item)
    {
        CloseDetailsModal();
        ShowEditModal(item);
    }

    private async Task SaveItem()
    {
        if (!IsFormValid())
        {
            return;
        }

        // If editing, show confirmation modal
        if (editingItem != null)
        {
            showEditConfirmation = true;
            StateHasChanged();
            return;
        }

        // If adding new item, save directly
        await PerformSave();
    }

    private async Task ConfirmEdit()
    {
        showEditConfirmation = false;
        await PerformSave();
    }

    private void CancelEdit()
    {
        showEditConfirmation = false;
        StateHasChanged();
    }

    private async Task PerformSave()
    {
        bool success;
        bool isEditing = editingItem != null;

        if (isEditing)
        {
            // When editing, DO NOT update quantity - it stays the same
            editingItem!.ItemName = itemName;
            editingItem.Brand = brand;
            editingItem.Category = category;
            editingItem.Description = description;
            // editingItem.Quantity = quantity; // REMOVED - quantity should not be editable
            editingItem.MinimumStockLevel = minimumStockLevel;
            editingItem.HighStockLevel = highStockLevel;
            editingItem.Unit = unit;
            editingItem.UnitPrice = unitPrice;
            // Don't update LastRestocked when just editing item details

            success = await InventoryService.UpdateItemAsync(editingItem);
        }
        else
        {
            // When adding new item, start with quantity 0
            var newItem = new InventoryItem
            {
                ItemName = itemName,
                Brand = brand,
                Category = category,
                Description = description,
                Quantity = 0, // New items start with 0 quantity
                MinimumStockLevel = minimumStockLevel,
                HighStockLevel = highStockLevel,
                Unit = unit,
                UnitPrice = unitPrice
            };

            success = await InventoryService.AddItemAsync(newItem);
        }

        if (success)
        {
            await LoadItems();
            ApplyFilters();
            CloseFormModal();

            // Show toast notification
            if (isEditing)
            {
                await ShowToast("success", "Item Updated!", $"{itemName} details have been successfully updated.");
            }
            else
            {
                await ShowToast("success", "Item Added!", $"{itemName} has been added to inventory. Add stock via purchase orders.");
            }
        }
        else
        {
            await ShowToast("error", "Error", "Failed to save item. Please try again.");
        }
    }

    private void CloseFormModal()
    {
        showFormModal = false;
        editingItem = null;
        StateHasChanged();
    }

    private void ViewItemDetails(InventoryItem item)
    {
        selectedItem = item;
        showDetailsModal = true;
        StateHasChanged();
    }

    private void CloseDetailsModal()
    {
        selectedItem = null;
        showDetailsModal = false;
        StateHasChanged();
    }

    private void ShowArchiveList()
    {
        showArchives = true;
        StateHasChanged();
    }

    private void CloseArchiveList()
    {
        showArchives = false;
        StateHasChanged();
    }

    private void ShowArchiveConfirmation(InventoryItem item)
    {
        itemToArchive = item;
        showArchiveConfirmationModal = true;
        StateHasChanged();
    }

    private void CancelArchive()
    {
        itemToArchive = null;
        showArchiveConfirmationModal = false;
        StateHasChanged();
    }

    private async Task ConfirmArchive()
    {
        if (itemToArchive != null)
        {
            var success = await InventoryService.ArchiveItemAsync(itemToArchive.ItemId);
            if (success)
            {
                var itemNameCopy = itemToArchive.ItemName;
                await LoadItems();
                CancelArchive();
                await ShowToast("info", "Item Archived", $"{itemNameCopy} has been moved to archives.");
            }
        }
    }

    private async Task RestoreItem(int id)
    {
        var item = archivedItems.FirstOrDefault(i => i.ItemId == id);
        var success = await InventoryService.RestoreItemAsync(id);
        if (success)
        {
            await LoadItems();
            StateHasChanged();
            if (item != null)
            {
                await ShowToast("success", "Item Restored", $"{item.ItemName} has been restored to inventory.");
            }
        }
    }

    private string GetStockStatus(InventoryItem item)
    {
        if (item.Quantity <= item.MinimumStockLevel)
            return "Low Stock";
        else if (item.Quantity >= item.HighStockLevel)
            return "High Stock";
        else
            return "Good Stock";
    }

    private string GetStockStatusBadgeClass(InventoryItem item)
    {
        if (item.Quantity <= item.MinimumStockLevel)
            return "bg-danger";
        else if (item.Quantity >= item.HighStockLevel)
            return "bg-success";
        else
            return "bg-primary";
    }

    private Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e?.Value?.ToString() ?? "";
        ApplyFilters();
        return Task.CompletedTask;
    }

    private Task OnBrandChanged(ChangeEventArgs e)
    {
        selectedBrand = e?.Value?.ToString() ?? "";
        ApplyFilters();
        return Task.CompletedTask;
    }

    private Task OnStockStatusChanged(ChangeEventArgs e)
    {
        selectedStockStatus = e?.Value?.ToString() ?? "";
        ApplyFilters();
        return Task.CompletedTask;
    }

    private async Task ShowToast(string type, string title, string message)
    {
        var toastType = type switch
        {
            "success" => "success",
            "error" => "danger",
            "info" => "info",
            "warning" => "warning",
            _ => "info"
        };

        await JSRuntime.InvokeVoidAsync("showToast", toastType, title, message);
    }
}
