@page "/schedules"
@using DVTech_ODSS.Models
@using DVTech_ODSS.Services
@inject ManpowerService ManpowerService
@rendermode InteractiveServer

<PageTitle>Schedule Management</PageTitle>

<div class="container-fluid">
    <div class="row mb-3 align-items-center">
        <div class="col">
            <h3 class="mb-0">📅 Schedule Management</h3>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="ShowAddForm">
                ➕ Create Schedule
            </button>
        </div>
    </div>

    <div class="card shadow-sm mb-3">
        <div class="card-body p-2">
            <div class="row g-2 align-items-center">
                <div class="col-auto">
                    <label class="form-label small mb-0 fw-bold">From:</label>
                </div>
                <div class="col-auto">
                    <input type="date" class="form-control form-control-sm" @bind="filterStartDate" />
                </div>
                <div class="col-auto">
                    <label class="form-label small mb-0 fw-bold">To:</label>
                </div>
                <div class="col-auto">
                    <input type="date" class="form-control form-control-sm" @bind="filterEndDate" />
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-primary" @onclick="FilterSchedules">Apply Filter</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ResetFilter">Reset</button>
                </div>
                <div class="col text-end">
                    <span class="badge bg-info">@displayedSchedules.Count schedules</span>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (showAddForm)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white py-2">
                <h6 class="mb-0">@(editingSchedule != null ? "Edit Schedule" : "Create New Schedule")</h6>
            </div>
            <div class="card-body p-3">
                <div class="row g-2 mb-2">
                    <div class="col-md-6">
                        <label class="form-label small fw-bold mb-1">Employee *</label>
                        <select class="form-control form-control-sm" @bind="selectedEmployeeId">
                            <option value="0">-- Select Employee --</option>
                            @foreach (var emp in employees)
                            {
                                <option value="@emp.EmployeeId">@emp.FullName (@emp.EmployeeCode)</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label small fw-bold mb-1">Date *</label>
                        <input type="date" class="form-control form-control-sm" @bind="scheduleDate" />
                    </div>
                </div>

                <div class="row g-2 mb-2">
                    <div class="col-md-4">
                        <label class="form-label small fw-bold mb-1">Shift Type *</label>
                        <select class="form-control form-control-sm" @bind="shiftType">
                            <option value="">-- Select --</option>
                            <option value="Morning">Morning</option>
                            <option value="Afternoon">Afternoon</option>
                            <option value="Evening">Evening</option>
                            <option value="Night">Night</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label small fw-bold mb-1">Start Time *</label>
                        <input type="time" class="form-control form-control-sm" value="@startTimeInput" @onchange="@(e => startTimeInput = e.Value?.ToString() ?? "08:00")" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label small fw-bold mb-1">End Time *</label>
                        <input type="time" class="form-control form-control-sm" value="@endTimeInput" @onchange="@(e => endTimeInput = e.Value?.ToString() ?? "17:00")" />
                    </div>
                </div>

                <div class="row g-2 mb-2">
                    <div class="col-md-6">
                        <label class="form-label small fw-bold mb-1">Location</label>
                        <input type="text" class="form-control form-control-sm" @bind="location" placeholder="Office, Site A, etc." />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label small fw-bold mb-1">Status</label>
                        <select class="form-control form-control-sm" @bind="status">
                            <option value="Scheduled">Scheduled</option>
                            <option value="Completed">Completed</option>
                            <option value="Absent">Absent</option>
                            <option value="On Leave">On Leave</option>
                        </select>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label small fw-bold mb-1">Notes</label>
                    <textarea class="form-control form-control-sm" rows="2" @bind="notes"></textarea>
                </div>

                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-success btn-sm" @onclick="SaveSchedule">Save Schedule</button>
                    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="CancelForm">Cancel</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-sm mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="py-2">Date</th>
                                <th class="py-2">Employee</th>
                                <th class="py-2">Position</th>
                                <th class="py-2">Shift</th>
                                <th class="py-2">Time</th>
                                <th class="py-2">Location</th>
                                <th class="py-2 text-center">Status</th>
                                <th class="py-2 text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (displayedSchedules.Any())
                            {
                                @foreach (var schedule in displayedSchedules)
                                {
                                    <tr>
                                        <td class="py-2 small">@schedule.Date.ToString("MMM dd, yyyy")</td>
                                        <td class="py-2 small">@schedule.Employee?.FullName</td>
                                        <td class="py-2 small">@schedule.Employee?.Position</td>
                                        <td class="py-2 small">@schedule.ShiftType</td>
                                        <td class="py-2 small">@FormatTimeSpan(schedule.StartTime) - @FormatTimeSpan(schedule.EndTime)</td>
                                        <td class="py-2 small">@schedule.Location</td>
                                        <td class="py-2 text-center">
                                            <span class="badge @GetStatusBadgeClass(schedule.Status) small">
                                                @schedule.Status
                                            </span>
                                        </td>
                                        <td class="py-2 text-center">
                                            <button type="button" class="btn btn-sm btn-outline-primary py-0 px-2" @onclick="@(() => EditSchedule(schedule))">Edit</button>
                                            <button type="button" class="btn btn-sm btn-outline-danger py-0 px-2" @onclick="@(() => DeleteSchedule(schedule.ScheduleId))">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center py-4 text-muted">
                                        No schedules found for the selected date range.
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Schedule> allSchedules = new();
    private List<Schedule> displayedSchedules = new();
    private List<Employee> employees = new();
    private Schedule? editingSchedule = null;
    private bool showAddForm = false;
    private bool isLoading = true;

    private DateTime filterStartDate = DateTime.Today.AddDays(-7);
    private DateTime filterEndDate = DateTime.Today.AddDays(7);
    
    // Form fields
    private int selectedEmployeeId = 0;
    private DateTime scheduleDate = DateTime.Today;
    private string shiftType = "Morning";
    private string startTimeInput = "08:00";
    private string endTimeInput = "17:00";
    private string location = "";
    private string status = "Scheduled";
    private string notes = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        employees = await ManpowerService.GetAllEmployeesAsync();
        await FilterSchedules();
        isLoading = false;
    }

    private async Task FilterSchedules()
    {
        allSchedules = await ManpowerService.GetSchedulesByDateRangeAsync(filterStartDate, filterEndDate);
        displayedSchedules = allSchedules;
        StateHasChanged();
    }

    private async Task ResetFilter()
    {
        filterStartDate = DateTime.Today.AddDays(-7);
        filterEndDate = DateTime.Today.AddDays(7);
        await FilterSchedules();
    }

    private void ShowAddForm()
    {
        editingSchedule = null;
        selectedEmployeeId = 0;
        scheduleDate = DateTime.Today;
        shiftType = "Morning";
        startTimeInput = "08:00";
        endTimeInput = "17:00";
        location = "";
        status = "Scheduled";
        notes = "";
        showAddForm = true;
        StateHasChanged();
    }

    private void EditSchedule(Schedule schedule)
    {
        editingSchedule = schedule;
        selectedEmployeeId = schedule.EmployeeId;
        scheduleDate = schedule.Date;
        shiftType = schedule.ShiftType;
        startTimeInput = $"{schedule.StartTime.Hours:D2}:{schedule.StartTime.Minutes:D2}";
        endTimeInput = $"{schedule.EndTime.Hours:D2}:{schedule.EndTime.Minutes:D2}";
        location = schedule.Location ?? "";
        status = schedule.Status;
        notes = schedule.Notes ?? "";
        showAddForm = true;
        StateHasChanged();
    }

    private async Task SaveSchedule()
    {
        if (selectedEmployeeId == 0)
        {
            return;
        }

        TimeSpan.TryParse(startTimeInput, out TimeSpan startTime);
        TimeSpan.TryParse(endTimeInput, out TimeSpan endTime);

        bool success;

        if (editingSchedule != null)
        {
            editingSchedule.EmployeeId = selectedEmployeeId;
            editingSchedule.Date = scheduleDate;
            editingSchedule.ShiftType = shiftType;
            editingSchedule.StartTime = startTime;
            editingSchedule.EndTime = endTime;
            editingSchedule.Location = location;
            editingSchedule.Status = status;
            editingSchedule.Notes = notes;

            success = await ManpowerService.UpdateScheduleAsync(editingSchedule);
        }
        else
        {
            var newSchedule = new Schedule
            {
                EmployeeId = selectedEmployeeId,
                Date = scheduleDate,
                ShiftType = shiftType,
                StartTime = startTime,
                EndTime = endTime,
                Location = location,
                Status = status,
                Notes = notes,
                IsActive = true
            };

            success = await ManpowerService.AddScheduleAsync(newSchedule);
        }

        if (success)
        {
            await FilterSchedules();
            CancelForm();
        }
    }

    private async Task DeleteSchedule(int id)
    {
        await ManpowerService.DeleteScheduleAsync(id);
        await FilterSchedules();
    }

    private void CancelForm()
    {
        showAddForm = false;
        editingSchedule = null;
        StateHasChanged();
    }

    private string FormatTimeSpan(TimeSpan time)
    {
        var dateTime = DateTime.Today.Add(time);
        return dateTime.ToString("hh:mm tt");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Scheduled" => "bg-primary",
            "Completed" => "bg-success",
            "Absent" => "bg-danger",
            "On Leave" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }
}