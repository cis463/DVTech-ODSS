@page "/purchase-orders"
@using DVTech_ODSS.Models
@using DVTech_ODSS.Services
@inject ProcurementService ProcurementService
@inject InventoryService InventoryService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Purchase Orders</PageTitle>

<div class="container-fluid">
    <div class="row mb-3 align-items-center">
        <div class="col">
            <h3 class="mb-0">🛒 Purchase Orders</h3>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowCreateForm">
                ➕ Create New Order
            </button>
        </div>
    </div>

    <!-- Status Filter Tabs -->
    <ul class="nav nav-pills mb-3">
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "All" ? "active" : "")" @onclick='() => FilterByStatus("All")' style="cursor: pointer;">
                All (@allOrders.Count)
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "Pending" ? "active" : "")" @onclick='() => FilterByStatus("Pending")' style="cursor: pointer;">
                Pending
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "Approved" ? "active" : "")" @onclick='() => FilterByStatus("Approved")' style="cursor: pointer;">
                Approved
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "Ordered" ? "active" : "")" @onclick='() => FilterByStatus("Ordered")' style="cursor: pointer;">
                Ordered
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(filterStatus == "Delivered" ? "active" : "")" @onclick='() => FilterByStatus("Delivered")' style="cursor: pointer;">
                Delivered
            </a>
        </li>
    </ul>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (showCreateForm)
    {
        <!-- CREATE ORDER FORM -->
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white py-2">
                <h6 class="mb-0">Create New Purchase Order</h6>
            </div>
            <div class="card-body p-3">
                <div class="row g-2 mb-3">
                    <div class="col-md-6">
                        <label class="form-label small fw-bold mb-1">Select Supplier *</label>
                        <select class="form-select" @onchange="OnSupplierSelected">
                            <option value="0">-- Choose a Supplier --</option>
                            @foreach (var supplier in suppliers)
                            {
                                <option value="@supplier.SupplierId">@supplier.SupplierName</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label small fw-bold mb-1">Expected Delivery</label>
                        <input type="date" class="form-control" @bind="expectedDeliveryDate" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label small fw-bold mb-1">Items Selected</label>
                        <input type="text" class="form-control text-center fw-bold" value="@orderItems.Count" readonly />
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label small fw-bold mb-1">Notes (Optional)</label>
                    <textarea class="form-control form-control-sm" rows="2" @bind="orderNotes" placeholder="Special instructions..."></textarea>
                </div>

                @if (selectedSupplierId > 0)
                {
                    <hr class="my-3" />
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Select Items</h6>
                        <small class="text-muted">Enter quantity and price for items to order</small>
                    </div>

                    @if (inventoryItems.Any())
                    {
                        <div class="row g-2">
                            @foreach (var item in inventoryItems)
                            {
                                var orderItem = orderItems.FirstOrDefault(oi => oi.ItemId == item.ItemId);
                                var quantity = orderItem?.Quantity ?? 0;
                                var unitPrice = orderItem?.UnitPrice ?? item.UnitPrice;

                                <div class="col-md-4 col-lg-3">
                                    <div class="card h-100 @(quantity > 0 ? "border-primary shadow-sm" : "")">
                                        <div class="card-body p-2">
                                            <h6 class="card-title mb-1 small">@item.ItemName</h6>
                                            <p class="card-text mb-2" style="font-size: 0.75rem; color: #6c757d;">
                                                @item.Category • Stock: @item.Quantity @item.Unit
                                            </p>

                                            <div class="row g-1">
                                                <div class="col-7">
                                                    <label class="form-label mb-0" style="font-size: 0.7rem;">Qty</label>
                                                    <input type="number"
                                                           class="form-control form-control-sm"
                                                           min="0"
                                                           value="@quantity"
                                                           @onchange="@(e => UpdateItemQuantity(item.ItemId, e.Value?.ToString()))" />
                                                </div>
                                                <div class="col-5">
                                                    <label class="form-label mb-0" style="font-size: 0.7rem;">Price</label>
                                                    <input type="number"
                                                           class="form-control form-control-sm"
                                                           step="0.01"
                                                           min="0"
                                                           value="@unitPrice"
                                                           @onchange="@(e => UpdateItemPrice(item.ItemId, e.Value?.ToString()))" />
                                                </div>
                                            </div>

                                            @if (quantity > 0)
                                            {
                                                <div class="mt-2 pt-2 border-top">
                                                    <small class="text-primary fw-bold">₱@((quantity * unitPrice).ToString("N2"))</small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="card mt-3 bg-light border-0">
                            <div class="card-body p-2">
                                <div class="row align-items-center">
                                    <div class="col-6">
                                        <div class="small">
                                            <strong>Items:</strong> @orderItems.Count
                                            <span class="text-muted ms-2">Qty:</span> @orderItems.Sum(oi => oi.Quantity)
                                        </div>
                                    </div>
                                    <div class="col-6 text-end">
                                        <h5 class="text-success mb-0">₱@CalculateTotalAmount().ToString("N2")</h5>
                                        <small class="text-muted">Total Amount</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info py-2 small mb-0">
                            No inventory items available.
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-warning py-2 small mb-0">
                        Please select a supplier to continue.
                    </div>
                }

                <div class="d-flex gap-2 mt-3">
                    <button class="btn btn-success"
                            @onclick="CreateOrder"
                            disabled="@(!CanCreateOrder())">
                        Create Order
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="CancelForm">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- ORDERS LIST -->
        <div class="card shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-sm mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="py-2">Order #</th>
                                <th class="py-2">Supplier</th>
                                <th class="py-2">Order Date</th>
                                <th class="py-2">Expected Delivery</th>
                                <th class="py-2 text-center">Items</th>
                                <th class="py-2 text-end">Total</th>
                                <th class="py-2 text-center">Status</th>
                                <th class="py-2 text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (displayedOrders.Any())
                            {
                                @foreach (var order in displayedOrders)
                                {
                                    <tr style="cursor: pointer;" @onclick="() => ViewOrderDetails(order)">
                                        <td class="py-2"><strong class="small">@order.OrderNumber</strong></td>
                                        <td class="py-2 small">@order.Supplier?.SupplierName</td>
                                        <td class="py-2 small">@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                        <td class="py-2 small">@(order.ExpectedDeliveryDate?.ToString("MMM dd, yyyy") ?? "-")</td>
                                        <td class="py-2 text-center small">@order.OrderItems.Count</td>
                                        <td class="py-2 text-end small"><strong>₱@order.TotalAmount.ToString("N2")</strong></td>
                                        <td class="py-2 text-center">
                                            <span class="badge @GetStatusBadgeClass(order.Status) small">
                                                @order.Status
                                            </span>
                                        </td>
                                        <td class="py-2 text-center" @onclick:stopPropagation="true">
                                            @if (order.Status == "Pending")
                                            {
                                                <button class="btn btn-success btn-sm py-0 px-2" @onclick='() => UpdateStatus(order.OrderId, "Approved")'>Approve</button>
                                            }
                                            else if (order.Status == "Approved")
                                            {
                                                <button class="btn btn-primary btn-sm py-0 px-2" @onclick='() => UpdateStatus(order.OrderId, "Ordered")'>Order</button>
                                            }
                                            else if (order.Status == "Ordered")
                                            {
                                                <button class="btn btn-info btn-sm py-0 px-2" @onclick='() => UpdateStatus(order.OrderId, "Delivered")'>Deliver</button>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center py-4 text-muted">
                                        No purchase orders found.
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Order Details Modal -->
@if (showDetailsModal && selectedOrder != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white py-2">
                    <h6 class="modal-title mb-0">Purchase Order Details</h6>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDetailsModal"></button>
                </div>
                <div class="modal-body p-3">
                    <div class="row mb-3">
                        <div class="col-8">
                            <h5 class="mb-1">@selectedOrder.OrderNumber</h5>
                            <p class="text-muted small mb-0">
                                <strong>Supplier:</strong> @selectedOrder.Supplier?.SupplierName
                            </p>
                            <p class="text-muted small mb-0">
                                <strong>Created by:</strong> @selectedOrder.CreatedBy
                            </p>
                        </div>
                        <div class="col-4 text-end">
                            <span class="badge @GetStatusBadgeClass(selectedOrder.Status) px-3 py-2">
                                @selectedOrder.Status
                            </span>
                        </div>
                    </div>

                    <div class="row g-3 mb-3">
                        <div class="col-4">
                            <label class="small text-muted mb-0">Order Date</label>
                            <p class="mb-0 small">@selectedOrder.OrderDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <div class="col-4">
                            <label class="small text-muted mb-0">Expected Delivery</label>
                            <p class="mb-0 small">@(selectedOrder.ExpectedDeliveryDate?.ToString("MMM dd, yyyy") ?? "Not set")</p>
                        </div>
                        <div class="col-4">
                            <label class="small text-muted mb-0">Actual Delivery</label>
                            <p class="mb-0 small">@(selectedOrder.ActualDeliveryDate?.ToString("MMM dd, yyyy") ?? "Pending")</p>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedOrder.Notes))
                    {
                        <div class="alert alert-info py-2 small mb-3">
                            <strong>Notes:</strong> @selectedOrder.Notes
                        </div>
                    }

                    <h6 class="mb-2">Order Items</h6>
                    <div class="table-responsive">
                        <table class="table table-sm table-bordered mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="py-1 small">Item Name</th>
                                    <th class="py-1 small">Category</th>
                                    <th class="py-1 text-end small">Quantity</th>
                                    <th class="py-1 text-end small">Unit Price</th>
                                    <th class="py-1 text-end small">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in selectedOrder.OrderItems)
                                {
                                    <tr>
                                        <td class="py-1 small">@item.InventoryItem?.ItemName</td>
                                        <td class="py-1 small">@item.InventoryItem?.Category</td>
                                        <td class="py-1 text-end small">@item.Quantity @item.InventoryItem?.Unit</td>
                                        <td class="py-1 text-end small">₱@item.UnitPrice.ToString("N2")</td>
                                        <td class="py-1 text-end small"><strong>₱@item.TotalPrice.ToString("N2")</strong></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot class="table-light">
                                <tr>
                                    <td colspan="4" class="py-2 text-end small"><strong>Grand Total:</strong></td>
                                    <td class="py-2 text-end"><strong class="text-success">₱@selectedOrder.TotalAmount.ToString("N2")</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <div class="modal-footer py-2">
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="CloseDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<PurchaseOrder> allOrders = new();
    private List<PurchaseOrder> displayedOrders = new();
    private List<Supplier> suppliers = new();
    private List<InventoryItem> inventoryItems = new();
    private List<PurchaseOrderItem> orderItems = new();

    private PurchaseOrder? selectedOrder = null;
    private bool showCreateForm = false;
    private bool showDetailsModal = false;
    private bool isLoading = true;
    private string filterStatus = "All";

    // Form fields
    private int selectedSupplierId = 0;
    private DateTime? expectedDeliveryDate = null;
    private string orderNotes = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        allOrders = await ProcurementService.GetAllPurchaseOrdersAsync();
        displayedOrders = allOrders;
        suppliers = await ProcurementService.GetAllSuppliersAsync();
        inventoryItems = await InventoryService.GetAllItemsAsync();
        isLoading = false;
    }

    private void ShowCreateForm()
    {
        selectedSupplierId = 0;
        expectedDeliveryDate = DateTime.Now.AddDays(7);
        orderNotes = string.Empty;
        orderItems = new();
        showCreateForm = true;
    }

    private void OnSupplierSelected(ChangeEventArgs e)
    {
        selectedSupplierId = int.Parse(e.Value?.ToString() ?? "0");
        StateHasChanged();
    }

    private void UpdateItemQuantity(int itemId, string? quantityStr)
    {
        if (!int.TryParse(quantityStr, out int quantity) || quantity < 0)
            return;

        var existingItem = orderItems.FirstOrDefault(oi => oi.ItemId == itemId);
        var inventoryItem = inventoryItems.FirstOrDefault(i => i.ItemId == itemId);

        if (inventoryItem == null)
            return;

        if (quantity == 0)
        {
            if (existingItem != null)
                orderItems.Remove(existingItem);
        }
        else
        {
            if (existingItem != null)
            {
                existingItem.Quantity = quantity;
            }
            else
            {
                orderItems.Add(new PurchaseOrderItem
                {
                    ItemId = itemId,
                    InventoryItem = inventoryItem,
                    Quantity = quantity,
                    UnitPrice = inventoryItem.UnitPrice
                });
            }
        }

        StateHasChanged();
    }

    private void UpdateItemPrice(int itemId, string? priceStr)
    {
        if (!decimal.TryParse(priceStr, out decimal price) || price < 0)
            return;

        var existingItem = orderItems.FirstOrDefault(oi => oi.ItemId == itemId);
        if (existingItem != null)
        {
            existingItem.UnitPrice = price;
            StateHasChanged();
        }
    }

    private decimal CalculateTotalAmount()
    {
        return orderItems.Sum(oi => oi.TotalPrice);
    }

    private bool CanCreateOrder()
    {
        return selectedSupplierId > 0 && orderItems.Any() && orderItems.All(oi => oi.Quantity > 0 && oi.UnitPrice > 0);
    }

    private async Task CreateOrder()
    {
        if (!CanCreateOrder())
            return;

        var newOrder = new PurchaseOrder
        {
            SupplierId = selectedSupplierId,
            ExpectedDeliveryDate = expectedDeliveryDate,
            Notes = orderNotes,
            OrderItems = orderItems,
            TotalAmount = CalculateTotalAmount()
        };

        var success = await ProcurementService.AddPurchaseOrderAsync(newOrder);

        if (success)
        {
            await LoadData();
            CancelForm();
        }
    }

    private async Task UpdateStatus(int orderId, string newStatus)
    {
        await ProcurementService.UpdateOrderStatusAsync(orderId, newStatus);
        await LoadData();
    }

    private void CancelForm()
    {
        showCreateForm = false;
        selectedSupplierId = 0;
        orderItems = new();
        StateHasChanged();
    }

    private void FilterByStatus(string status)
    {
        filterStatus = status;

        if (status == "All")
        {
            displayedOrders = allOrders;
        }
        else
        {
            displayedOrders = allOrders.Where(o => o.Status == status).ToList();
        }

        StateHasChanged();
    }

    private void ViewOrderDetails(PurchaseOrder order)
    {
        selectedOrder = order;
        showDetailsModal = true;
        StateHasChanged();
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedOrder = null;
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Approved" => "bg-info",
            "Ordered" => "bg-primary",
            "Delivered" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}